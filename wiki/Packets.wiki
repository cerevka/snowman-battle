#summary Popis síťového protokolu

= Vytváření a zpracování paketů =

Pro potřeby aplikace jsme si vytvořili vlastní protokol. Vzhledem k tomu, že po síti musíme přenášet i chatové zprávy, mají naše pakety proměnou délku. Všechny pakety jsou reprezentovány jako pole unsigned char. První 3 byte jsou hlavička a vypadají takto:

0. pole - velikost zprávy v počtu charů <br>
1. pole - odesilatel (server je 0) <br>
2. pole - typ zprávy <br>

Další byty paketu se už liší podle typu (u některých typů se posílá jen samotná hlavička). Celkem máme něco okolo 30 různých typů zpráv (Seznam je uveden v prezentaci).

V programu se o tyto zprávy starají třídy !PacketCreator a !PacketParser. !PaketCreator, jak již název napovídá, slouží k vytváření paketů, které budou následně odeslány po síti. Tato třída má spoustu slotů, která volají ostatní části aplikace a podle toho se vytváří a posílají pakety. Většinou platí, že jeden slot odpovídá jednomu typu paketu. Takto vypadá několik slotů:


{{{

    /**
     * Slot, do kterého se posílá, že hráč pustil klávesu pro pohyb
     */
    void stopMove(void);

    /**
     * Slot pro odeslání hello paketu
     */
    void sendHelloPacket(void);

    /*********************************************************/
    /* -------------sloty pro výstup enginu hry------------- */

    /**
     * Slot, do kterého se posílá informace o tom, že je možné odeslat paket enginu hry
     */
    void sendGameEnginePacket(void);

    /**
     * Slot, do kterého se posílá informace o naspawnování hráče
     * @param playerID id hráče, který se má spawnout
     * @param x x-ová souřadnice místa spawnutí (levý horní roh)
     * @param y y-ová souřadnice místa spawnutí (levý horní roh)
     * @param direction směr, kterým bude hráč otočený
     */
    void spawnPlayer(int playerID, int x, int y, int direction);

}}}

Naproti tomu třída !PacketParser čte a rozpoznává. Podle toho který z paketů přijde, vyemituje správný signál. Pro příklad ukáži několik signálů:

{{{

    /**
     * Signál zničení střely
     * @param shotID id střely, který se má zničit
     */
    void shotDestroyed(int shotID);

    /**
     * Signál výstřelu hráče (pro odečtení nábojů)
     * @param playerID id hráče, který vystřelil
     */
    void playerShoted(int playerID);

    /**
     * Signál zvýšení skóre hráče
     * @param playerID id hráče, kterému se zvýšilo skóre
     */
    void playersScoreIncremented(int playerID);

    /**********************************************************/
    /* -------------------řídící signály--------------------- */

    /**
     * Signál ukončení hry
     */
    void gameQuited(void);

}}}